// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from br_network_manager.djinni

#pragma once

#include "br_network_listener.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeBrNetworkListener final : ::djinni::JniInterface<::biblereader::BrNetworkListener, NativeBrNetworkListener> {
public:
    using CppType = std::shared_ptr<::biblereader::BrNetworkListener>;
    using CppOptType = std::shared_ptr<::biblereader::BrNetworkListener>;
    using JniType = jobject;

    using Boxed = NativeBrNetworkListener;

    ~NativeBrNetworkListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeBrNetworkListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeBrNetworkListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeBrNetworkListener();
    friend ::djinni::JniClass<NativeBrNetworkListener>;
    friend ::djinni::JniInterface<::biblereader::BrNetworkListener, NativeBrNetworkListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::biblereader::BrNetworkListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void complete(const std::shared_ptr<::biblereader::BrBaseViewModel> & view_model) override;

    private:
        friend ::djinni::JniInterface<::biblereader::BrNetworkListener, ::djinni_generated::NativeBrNetworkListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/thoughtsofanintrovert/brDjinni/BrNetworkListener") };
    const jmethodID method_complete { ::djinni::jniGetMethodID(clazz.get(), "complete", "(Lcom/thoughtsofanintrovert/brDjinni/BrBaseViewModel;)V") };
};

}  // namespace djinni_generated
