// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from network_manager.djinni

#pragma once

#include "djinni_support.hpp"
#include "network_listener.hpp"

namespace djinni_generated {

class NativeNetworkListener final : ::djinni::JniInterface<::biblereader::NetworkListener, NativeNetworkListener> {
public:
    using CppType = std::shared_ptr<::biblereader::NetworkListener>;
    using CppOptType = std::shared_ptr<::biblereader::NetworkListener>;
    using JniType = jobject;

    using Boxed = NativeNetworkListener;

    ~NativeNetworkListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeNetworkListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeNetworkListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeNetworkListener();
    friend ::djinni::JniClass<NativeNetworkListener>;
    friend ::djinni::JniInterface<::biblereader::NetworkListener, NativeNetworkListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::biblereader::NetworkListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void complete(const std::shared_ptr<::biblereader::BaseViewModel> & view_model) override;

    private:
        friend ::djinni::JniInterface<::biblereader::NetworkListener, ::djinni_generated::NativeNetworkListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/thoughtsofanintrovert/brDjinni/NetworkListener") };
    const jmethodID method_complete { ::djinni::jniGetMethodID(clazz.get(), "complete", "(Lcom/thoughtsofanintrovert/brDjinni/BaseViewModel;)V") };
};

}  // namespace djinni_generated
